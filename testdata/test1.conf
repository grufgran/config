# conf testfile
[ ] # this should actually be a []. But since we trim space, it becomes a []
testrole=test
testrole2=test2
testconstant = const1 
property = value  # with a comment

[define myMacro($y, $z)]
x=1
c=[:testrole]
y={$y}
z={$z}
# There are two different ways to use a macro...
# ...pass arguments inline
[usage1]
[use myMacro(2, 3)]
# ...a variation: pass inline and quote arguments that may
# contain , or ) (after evaluating "constants")
[usage1_quoted]
[use myMacro(" 2 ", "3,) ")]
# ... or set them before using the macro.
# No quoting needed here.
[usage2]
$y=2
$z=3
# Here there are no parentheses after the macro name
[use myMacro]

[define   myMacroInMacro($y, $z)]
x=2
[use myMacro(3, 4)]
y2={$y}
z2={$z}

[usage3]
[use myMacroInMacro(1, 2)]

# missing left squere bracket test. And skipSection test if required roles are not present
[ [ :testrole ] & requiredrole ? this is a section, with a missing left squere bracket]]
prop1=If the required roles are present, we should not get here, since the section above is faulty. Else this row should be skipped

[[:testrole2]? sectionrole]
key1=value1
key2 = value2

[multiLine test]
# multiLineHereDoc test
multiLine1=<<EOF
  row1
  row2 # in multiLineHereDoc, it is allowed to have #-chars. I e they are *not* comment markers.
  row3\
[:testrole][:testconstant]
row4
EOF

# multLineBackslash test
multiLine2 = val1,\ # comment test
val2,val3,val4,\
val5,\ # comment test2
val6


[include = test2.conf]
[include_if_exists = test2.conf]
[include_site_if_exists = test2.conf]
[include = ^/test2.conf]